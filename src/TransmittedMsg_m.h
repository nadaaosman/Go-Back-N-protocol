//
// Generated file, do not edit! Created by nedtool 5.6 from TransmittedMsg.msg.
//

#ifndef __TRANSMITTEDMSG_M_H
#define __TRANSMITTEDMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>TransmittedMsg.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet TransmittedMsg
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 * //    int someField;
 * //    abstract int anotherField;
 * 
 *     int parity;
 *     int seqNumber;
 *     string payload; // the message contents after byte stuffing (in characters)
 *     int frameType; //Data=0/ACK=1 /NACK=2
 *     int ackNumber;
 *     double time; //time at which the message is send to detect timeout event
 *     string Error;
 * }
 * </pre>
 *
 * TransmittedMsg_Base is only useful if it gets subclassed, and TransmittedMsg is derived from it.
 * The minimum code to be written for TransmittedMsg is the following:
 *
 * <pre>
 * class TransmittedMsg : public TransmittedMsg_Base
 * {
 *   private:
 *     void copy(const TransmittedMsg& other) { ... }

 *   public:
 *     TransmittedMsg(const char *name=nullptr, short kind=0) : TransmittedMsg_Base(name,kind) {}
 *     TransmittedMsg(const TransmittedMsg& other) : TransmittedMsg_Base(other) {copy(other);}
 *     TransmittedMsg& operator=(const TransmittedMsg& other) {if (this==&other) return *this; TransmittedMsg_Base::operator=(other); copy(other); return *this;}
 *     virtual TransmittedMsg *dup() const override {return new TransmittedMsg(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from TransmittedMsg_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(TransmittedMsg)
 * </pre>
 */
class TransmittedMsg_Base : public ::omnetpp::cPacket
{
  protected:
    int parity;
    int seqNumber;
    ::omnetpp::opp_string payload;
    int frameType;
    int ackNumber;
    double time;
    ::omnetpp::opp_string Error;

  private:
    void copy(const TransmittedMsg_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TransmittedMsg_Base&);
    // make constructors protected to avoid instantiation
//    TransmittedMsg_Base(const char *name=nullptr, short kind=0);
//    TransmittedMsg_Base(const TransmittedMsg_Base& other);
    // make assignment operator protected to force the user override it
//    TransmittedMsg_Base& operator=(const TransmittedMsg_Base& other);

  public:
    virtual ~TransmittedMsg_Base();
//    virtual TransmittedMsg_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class TransmittedMsg");}
    virtual TransmittedMsg_Base *dup() const override {return new TransmittedMsg_Base(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
    TransmittedMsg_Base(const char *name=nullptr, short kind=0);
   TransmittedMsg_Base& operator=(const TransmittedMsg_Base& other);
   TransmittedMsg_Base(const TransmittedMsg_Base& other);
    // field getter/setter methods
    virtual int getParity() const;
    virtual void setParity(int parity);
    virtual int getSeqNumber() const;
    virtual void setSeqNumber(int seqNumber);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);
    virtual int getAckNumber() const;
    virtual void setAckNumber(int ackNumber);
    virtual double getTime() const;
    virtual void setTime(double time);
    virtual const char * getError() const;
    virtual void setError(const char * Error);
};


#endif // ifndef __TRANSMITTEDMSG_M_H

